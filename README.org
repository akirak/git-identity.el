* git-identity.el
[[https://melpa.org/#/git-identity][file:https://melpa.org/packages/git-identity-badge.svg]]

[[https://github.com/akirak/git-identity.el/workflows/lint/badge.svg?branch=master]]

This Emacs package lets you manage local Git identities, i.e. =user.name= and =user.email= options in =.git/config=, from inside Emacs. 
It is primarily intended for users who meet all of the following assumptions:

- You use Emacs.
- You (almost always) use [[https://magit.vc][magit]] for Git operations on your machine(s).
- You have to handle multiple Git identities on the same machine(s).

I found a CLI tool for the same purpose named [[https://github.com/prydonius/karn][karn]], but since Emacs users are likely to run Git operations from inside Emacs (and the interface is probably Magit),
it would be better if you had a solution integrated into Emacs.
You only need to set a name and an email address before you perform =git-commit=, and if you use Emacs and Magit, it can be implemented by advising =magit-commit=. This package solves the problem. Now you don't need a global Git configuration file to set your name and email address.
** Features
- You can configure multiple identities in your =custom-file= or in your init file. No extra dotfile is needed. If you work on multiple machines with different set of identities, you can maintain per-host configuration by just having separate custom files.
- You can associate identities with repository host names and/or local working tree locations.
- =git-identity-magit-mode= adds a =:before= hook to =magit-commit= to ensure that a given repository gets an expected identity before =git-commit= is run.
- For manual operation, it provides a command to select an identity in the current repository interactively.
- It provides a command (actually a hydra) to review your identity quickly and set a new one if necessary.
** Installation
Install =git-identity= from MELPA.
** Configuration
1. Set =git-identity-default-username=, which is used as the default user name for all repositories.
2. Configure =git-identity-list= variable. You can use =customize-variable=. Each entry consists of a mandatory e-mail address and options. The user name is optional, and if it is omitted, the default user name is set along with the e-mail address. You can associate repository hosts and/or local repository locations with the identity, which are used to pick an identity for a given repository.
3. Optionally, you can start =git-identity-magit-mode= in your =~/.emacs.d/.init.el=, which turns on the hook run before =magit-status=.

Below is an example configuration using =use-package=:

#+begin_src emacs-lisp
  (use-package git-identity
    :after magit
    :config
    (git-identity-magit-mode 1)
    ;; Bind I to git-identity-info in magit-status
    (define-key magit-status-mode-map (kbd "I") 'git-identity-info)
    :custom
    ;; Warn if the global identity setting violates your policy
    (git-identity-verify t)
    ;; The default user name
    (git-identity-default-username "Akira Komamura"))

  ;; And set git-identity-list in your custom-file or init file
  (setq git-identity-list
        '(("my.personal.address@gmail.com"
           :domains ("github.com")
           ;; The identity is applied if the remote URL contains this organization as directory
           :exclude-organizations ("my-company-org")
           :dirs ("~/.emacs.d" "~/personal"))
          ("my.personal.address@mycompanyorg.com"
           :domains ("github.com")
           ;; The identity is applied if the remote URL contains this organization as directory
           :organizations ("my-company-org"))
          ("my.name@mycompany.com"
           :domains ("mycompany.com")
           :dirs ("~/work"))
          ("liuwenbin@xxx12345.cn"
           ;; Chinese name for cool Chinese sites!
           :name "刘文彬")))
#+end_src

Note: The format of =git-identity-list= is going to be changed in an upcoming version. See [[https://github.com/akirak/git-identity.el/issues/2][#2]] for details.

You can restrict an identity to a certain organization (by setting =:organizations=) and prevent it from setting in an organization (by setting =:exclude-organizations=), but those options are effective if and only if you set correct =:domains=. For example, you can have separate identities on GitHub both for personal and for your company, but you have to include =github.com= in =:domains= of both identities. Note: Organization names are case-insensitive.
** Usage
If you turn on =git-identity-magit-mode=, git-identity checks for an identity every time =magit-commit= is invoked.
If there is no local identity setting but a global one, the latter is used, so it won't prompt for an identity.

You can also set the identity manually through =git-identity-set-identity= command.

To check what name and e-mail address are set on the repository, use =git-identity-info= command.
** Changelog
*** 0.1.2 [2020-12-23 Wed]
- Add support for organizations and multiple identities on the same hosts
*** 0.1.1 [2020-01-25 Sat]
- Fix the bug of duplicate confirmation in setting an expected identity.
- Fix the bug of trying to set an identity when the global identity is the same as an expected identity.
- Add a separate =git-identity-magit.el= for a linting reason.
** License
GPL v3
